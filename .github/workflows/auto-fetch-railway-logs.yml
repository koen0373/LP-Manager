name: Auto-Fetch Railway Logs After Deploy

on:
  push:
    branches: [ main ]

jobs:
  wait-and-fetch:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Wait for Railway deployment to start
        run: |
          echo "⏳ Waiting 30 seconds for Railway to start deploying..."
          sleep 30
      
      - name: Install Railway CLI
        run: npm install -g @railway/cli
      
      - name: Monitor deployment and fetch logs
        run: |
          echo "🚂 Starting Railway deployment monitoring..."
          
          # Create logs directory
          mkdir -p railway-logs
          
          # Export Railway token
          export RAILWAY_TOKEN="${{ secrets.RAILWAY_API_TOKEN }}"
          
          # Wait for deployment to complete (max 10 minutes)
          COUNTER=0
          MAX_WAIT=120  # 120 * 5s = 10 minutes
          
          while [ $COUNTER -lt $MAX_WAIT ]; do
            echo "🔍 Check #$COUNTER - Fetching Railway status..."
            
            # Get current deployment status
            railway status > railway-logs/status-$COUNTER.txt 2>&1 || true
            
            # Fetch latest logs
            railway logs \
              --project ${{ secrets.RAILWAY_PROJECT_ID }} \
              --environment production \
              > railway-logs/deployment-logs-$COUNTER.txt 2>&1 || true
            
            # Check if deployment finished (look for success/failure indicators)
            if grep -q "Successfully deployed" railway-logs/deployment-logs-$COUNTER.txt 2>/dev/null; then
              echo "✅ Deployment succeeded!"
              break
            fi
            
            if grep -q "Failed to compile" railway-logs/deployment-logs-$COUNTER.txt 2>/dev/null; then
              echo "❌ Deployment failed - build error detected"
              break
            fi
            
            if grep -q "error" railway-logs/deployment-logs-$COUNTER.txt 2>/dev/null; then
              echo "⚠️  Errors detected in logs"
            fi
            
            sleep 5
            COUNTER=$((COUNTER + 1))
          done
          
          # Final log fetch
          echo "📋 Fetching final logs..."
          railway logs \
            --project ${{ secrets.RAILWAY_PROJECT_ID }} \
            --environment production \
            > railway-logs/final-deployment-logs.txt 2>&1 || true
          
          # Get JSON version for parsing
          railway logs \
            --project ${{ secrets.RAILWAY_PROJECT_ID }} \
            --environment production \
            --json \
            > railway-logs/final-deployment-logs.json 2>&1 || true
          
          echo "✅ Monitoring complete"
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}
      
      - name: Analyze logs for errors
        run: |
          echo "🔍 Analyzing deployment logs..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          if [ -f railway-logs/final-deployment-logs.txt ]; then
            # Extract errors
            echo "❌ ERRORS:"
            grep -iE "error|exception|failed" railway-logs/final-deployment-logs.txt | tail -n 30 || echo "No errors found"
            
            echo ""
            echo "⚠️  WARNINGS:"
            grep -i "warning" railway-logs/final-deployment-logs.txt | tail -n 20 || echo "No warnings found"
            
            echo ""
            echo "ℹ️  BUILD OUTPUT:"
            grep -E "(Building|Compiled|Generated)" railway-logs/final-deployment-logs.txt | tail -n 20 || echo "No build output found"
            
            echo ""
            echo "📊 SUMMARY:"
            echo "Total log lines: $(wc -l < railway-logs/final-deployment-logs.txt)"
            echo "Error count: $(grep -ic "error" railway-logs/final-deployment-logs.txt || echo 0)"
            echo "Warning count: $(grep -ic "warning" railway-logs/final-deployment-logs.txt || echo 0)"
          else
            echo "⚠️  No final logs file found"
          fi
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      
      - name: Upload logs as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: railway-deployment-logs-${{ github.sha }}
          path: railway-logs/
          retention-days: 30
      
      - name: Comment on commit with log summary
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            
            let logContent = 'No logs available';
            try {
              logContent = fs.readFileSync('railway-logs/final-deployment-logs.txt', 'utf8');
            } catch (e) {
              console.log('Could not read logs:', e);
            }
            
            // Extract last 50 lines
            const lines = logContent.split('\n');
            const lastLines = lines.slice(-50).join('\n');
            
            // Count errors and warnings
            const errorCount = (logContent.match(/error/gi) || []).length;
            const warningCount = (logContent.match(/warning/gi) || []).length;
            
            const body = `## 🚂 Railway Deployment Logs
            
**Commit:** ${context.sha.substring(0, 7)}
**Status:** ${errorCount > 0 ? '❌ Errors detected' : '✅ No errors'}

### 📊 Summary
- Total lines: ${lines.length}
- Errors: ${errorCount}
- Warnings: ${warningCount}

### 📋 Last 50 log lines:
\`\`\`
${lastLines}
\`\`\`

[View full logs artifact](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            `;
            
            // Create comment on commit
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: body
            });


// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  email         String?    @unique
  state         UserState  @default(WAITLIST)
  poolAllowance Int        @default(0)
  activatedAt   DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  wallets   Wallet[]
  payments  Payment[]
}

model PoolEvent {
  id           String   @id // txHash:logIndex
  pool         String   // pool address (checksummed lower-case)
  blockNumber  Int
  txHash       String
  logIndex     Int
  timestamp    Int
  eventName    String   // 'Mint' | 'Burn' | 'Swap' | 'Collect' | 'Flash' ...
  // Common decoded fields (NULLABLE; gebruik per event)
  sender       String?
  owner        String?
  recipient    String?
  tickLower    Int?
  tickUpper    Int?
  amount       String?  // uint128/liquidity (for Mint/Burn)
  amount0      String?
  amount1      String?
  sqrtPriceX96 String?
  liquidity    String?
  tick         Int?

  // dedupe guard
  @@unique([txHash, logIndex])
  @@index([pool, blockNumber])
}

model WaitlistEntry {
  id         String   @id @default(cuid())
  email      String
  wallet     String?
  fastTrack  Boolean  @default(false)
  message    String?
  createdAt  DateTime @default(now())

  @@unique([email])
}

enum PositionEventType {
  MINT
  INCREASE
  DECREASE
  COLLECT
  BURN
  SWAP
  OTHER
}

model PositionEvent {
  id             String             @id // txHash:logIndex
  tokenId        String
  pool           String
  blockNumber    Int
  txHash         String
  logIndex       Int
  timestamp      Int
  eventType      PositionEventType
  sender         String?
  owner          String?
  recipient      String?
  tickLower      Int?
  tickUpper      Int?
  tick           Int?
  liquidityDelta String?
  amount0        String?
  amount1        String?
  sqrtPriceX96   String?
  price1Per0     Float?
  usdValue       Float?
  metadata       Json?

  @@unique([txHash, logIndex])
  @@index([tokenId, blockNumber])
  @@index([pool, blockNumber])
}

model PositionTransfer {
  id          String @id // txHash:logIndex
  tokenId     String
  from        String
  to          String
  blockNumber Int
  txHash      String
  logIndex    Int
  timestamp   Int
  metadata    Json?

  @@unique([txHash, logIndex])
  @@index([tokenId, blockNumber])
}

enum CapitalFlowType {
  DEPOSIT
  WITHDRAW
  FEES_REALIZED
  FEES_REINVESTED
  TRANSFER
  OTHER
}

enum PoolStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum PaymentKind {
  FAST_FORWARD
}

enum UserState {
  WAITLIST
  ACTIVATED
}

model CapitalFlow {
  id          String           @id
  wallet      String
  tokenId     String?
  pool        String?
  flowType    CapitalFlowType
  amountUsd   Float
  amount0     String?
  amount1     String?
  timestamp   Int
  txHash      String
  relatedTx   String?
  metadata    Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([wallet, timestamp])
  @@index([tokenId, timestamp])
  @@index([pool, timestamp])
}

model Wallet {
  id               Int        @id @default(autoincrement())
  userId           String
  address          String
  billingStartedAt DateTime   @default(now())
  billingExpiresAt DateTime   @default(now())
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pools    UserPool[]

  @@unique([userId, address])
  @@index([billingExpiresAt])
}

model UserPool {
  id                  Int        @id @default(autoincrement())
  walletId            Int
  poolId              String
  provider            String
  status              PoolStatus @default(ACTIVE)
  excludedFromBilling Boolean    @default(false)
  lastActivity        DateTime?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@unique([walletId, poolId])
  @@index([walletId, status])
}

model Payment {
  id                 Int            @id @default(autoincrement())
  userId             String
  provider           String         @default("crypto")
  chainId            Int
  tokenAddress       String
  treasuryAddress    String
  amountUsd          Float
  amountToken        Float
  txHash             String?
  intentId           String         @unique
  expiresAt          DateTime?
  payerAddress       String?
  kind               PaymentKind    @default(FAST_FORWARD)
  status             PaymentStatus  @default(PENDING)
  disclaimerAccepted Boolean        @default(false)
  approvedBy         String?
  approvedAt         DateTime?
  invoiceNumber      String?
  invoiceIssuedAt    DateTime?
  invoiceCsv         String?
  invoiceSentAt      DateTime?
  createdAt          DateTime       @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

// Indexer checkpoint tracking
model SyncCheckpoint {
  id             String   @id // source:key (e.g., "NPM:global" or "NPM:tokenId:22003")
  source         String   // "NPM" | "POOL" | etc
  key            String   // "global" | "tokenId:22003" | "pool:0x..."
  lastBlock      Int      // Last fully synced block
  lastTimestamp  Int?     // Block timestamp (for reference)
  eventsCount    Int      @default(0) // Total events synced
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())

  @@unique([source, key])
  @@index([source, lastBlock])
}

// Backfill checkpoint per tokenId (LP position)
model BackfillCursor {
  tokenId        Int      @id
  lastBlock      Int      @default(0)
  lastFetchedAt  DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())

  @@index([lastBlock])
}

model PlaceholderSignup {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

/// -------- Analytics foundation (safe-prefixed) --------
model analytics_provider {
  id        BigInt @id @default(autoincrement())
  slug      String @unique
  name      String
  type      String   // dex_v3 | staking | perps
  createdAt DateTime @default(now())
  markets   analytics_market[]
}

model analytics_market {
  id           BigInt @id @default(autoincrement())
  providerId   BigInt
  provider     analytics_provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerSlug String
  marketId     String
  feeTierBps   Int
  token0Symbol String
  token1Symbol String
  poolAddress  String?
  createdAt    DateTime @default(now())
  snapshots    analytics_market_snapshot[]
  positions    analytics_position[]

  @@unique([providerSlug, marketId])
  @@index([providerId])
}

model analytics_market_snapshot {
  id            BigInt   @id @default(autoincrement())
  marketIdFk    BigInt
  market        analytics_market @relation(fields: [marketIdFk], references: [id], onDelete: Cascade)
  ts            DateTime @default(now())
  price         Decimal  @db.Decimal(38, 18)
  tvlUsd        Decimal  @db.Decimal(38, 18)
  volume24hUsd  Decimal? @db.Decimal(38, 18)
  incentiveUsd  Decimal? @db.Decimal(38, 18)
  apyPct        Decimal? @db.Decimal(38, 18)

  @@index([marketIdFk, ts])
}

model analytics_wallet {
  id         BigInt   @id @default(autoincrement())
  address    String   @unique
  firstSeen  DateTime @default(now())
  lastSeen   DateTime @updatedAt
  positions  analytics_position[]
  metrics    analytics_wallet_metrics_daily[]
}

model analytics_position {
  id           BigInt  @id @default(autoincrement())
  walletId     BigInt
  wallet       analytics_wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
  marketIdFk   BigInt
  market       analytics_market @relation(fields: [marketIdFk], references: [id], onDelete: Cascade)
  onchainId    String
  status       String
  lowerPrice   Decimal @db.Decimal(38, 18)
  upperPrice   Decimal @db.Decimal(38, 18)
  feeTierBps   Int
  createdAt    DateTime @default(now())
  snapshots    analytics_position_snapshot[]

  @@unique([marketIdFk, onchainId])
  @@index([walletId])
}

model analytics_position_snapshot {
  id              BigInt   @id @default(autoincrement())
  positionIdFk    BigInt
  position        analytics_position @relation(fields: [positionIdFk], references: [id], onDelete: Cascade)
  ts              DateTime @default(now())
  amount0         Decimal  @db.Decimal(38, 18)
  amount1         Decimal  @db.Decimal(38, 18)
  tvlUsd          Decimal  @db.Decimal(38, 18)
  feesToken0      Decimal  @db.Decimal(38, 18)
  feesToken1      Decimal  @db.Decimal(38, 18)
  feesUsd         Decimal  @db.Decimal(38, 18)
  incentivesUsd   Decimal? @db.Decimal(38, 18)
  inRange         Boolean

  @@index([positionIdFk, ts])
}

model analytics_wallet_metrics_daily {
  id                  BigInt   @id @default(autoincrement())
  walletId            BigInt
  wallet              analytics_wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
  day                 DateTime
  poolsCount          Int
  activePoolsCount    Int
  tvlUsd              Decimal  @db.Decimal(38, 18)
  realizedFeesUsd     Decimal  @db.Decimal(38, 18)
  avgApyPct           Decimal? @db.Decimal(38, 18)
  avgRangeWidthRatio  Decimal? @db.Decimal(38, 18)

  @@unique([walletId, day])
  @@index([day])
}

model analytics_market_metrics_daily {
  id               BigInt   @id @default(autoincrement())
  marketIdFk       BigInt
  market           analytics_market @relation(fields: [marketIdFk], references: [id], onDelete: Cascade)
  day              DateTime
  tvlUsd           Decimal  @db.Decimal(38, 18)
  activePositions  Int
  avgApyPct        Decimal? @db.Decimal(38, 18)

  @@unique([marketIdFk, day])
  @@index([day])
}

model analytics_discovery_log {
  id          BigInt   @id @default(autoincrement())
  source      String   // e.g. enosys-v3:PositionManager
  provider    String
  txHash      String?
  block       BigInt?
  wallet      String
  marketId    String?
  ts          DateTime @default(now())

  @@index([provider, ts])
}
